<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="video">
  <title><xmlelement>video</xmlelement></title>
  <shortdesc conkeyref="reuse-video/shortdesc"/>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>video</indexterm>
        <indexterm>multimedia domain<indexterm>video </indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section conkeyref="reuse-video/usage-information"><title/><p/></section>
    <section conkeyref="reuse-video/rendering-expectations"><title/><p/></section>
    <section id="specialization-hierarchy">
      <title>Specialization hierarchy</title>
      <p>The <xmlelement>video</xmlelement> element is specialized from
          <xmlelement>object</xmlelement>. It is defined in the multimedia-domain module.</p>
    </section>
    <section id="attributes">
      <title>Attributes</title>
      <p>The following attributes are available on this element: <xref keyref="attributes-universal"
        /> and the attributes defined below.</p>
      <dl>
        <dlentry>
          <!--KJE: RDA and I discussed this on 29 April 2019. We could not come up with a phrasing that would not include "should". Adding this comment so that we don't have the discussion again.-->
          <dt><xmlatt>data</xmlatt></dt>
          <dd>Specifies the absolute or relative URI of the video object. If this attribute is
            specified, <xmlatt>type</xmlatt> also should be specified.</dd>
        </dlentry>
        <dlentry>
          <!-- Identical to definition in video topic -->
          <dt><xmlatt>datakeyref</xmlatt></dt>
          <dd>Provides a key reference to the video object. When specified and the key is
            resolvable, the key-provided URI is used. If the key referenced by
              <xmlatt>datakeyref</xmlatt> cannot be resolved, and <xmlatt>data</xmlatt> is
            specified, that value provided by <xmlatt>data</xmlatt> is used as a fallback. If the
            key referenced by <xmlatt>datakeyref</xmlatt> has no associated resource, only link
            text, and the video object does not contain a <xmlelement>fallback</xmlelement> element,
            the link text becomes fallback content for the video object.</dd>
          <dd/>
        </dlentry>
        <dlentry>
          <!-- Identical to definition in video topic -->
          <dt><xmlatt>type</xmlatt></dt>
          <dd>Indicates the MIME type for the video object. This attribute enables processors to
            avoid loading unsuppported objects. If <xmlatt>type</xmlatt> is not specified, the
            effective type for the key named by the <xmlatt>datakeyref</xmlatt> attribute is used as
            the value. If an explicit <xmlatt>type</xmlatt> is not specified on either the audio
            object or key definition, processors can use other means, such the URI file extension,
            to determine the effective MIME type of the media object.</dd>
        </dlentry>
        <dlentry conref="../../common/conref-attribute.dita#conref-attribute/image-height">
          <dt/>
          <dd/>
        </dlentry>
        <dlentry conref="../../common/conref-attribute.dita#conref-attribute/image-width">
          <dt/>
          <dd/>
        </dlentry>
        <dlentry>
          <dt><xmlatt>tabindex</xmlatt></dt>
          <dd>Position the video in tabbing order.</dd>
        </dlentry>
      </dl>
    </section>
    <example otherprops="examples">
<title>Examples</title>
<fig id="fig_amp_v4z_4hb"><title>A simple video object</title><p>In the following code sample, a
video object is referenced using direct addressing. The <xmlatt>type</xmlatt> attribute specifies
the MIME type of the object.
</p><codeblock>&lt;video data="video.mp4" type="video/mp4"/></codeblock><p>The video object also could be addressed using a key reference; in this version, both the URI and
          the MIME type come from the key definition.</p><codeblock>&lt;video datakeyref="video"/></codeblock></fig>
<fig id="fig_ql2_cpz_4hb"><title>A video object with multiple formats</title><p>In the following
code sample, <xmlelement>media-source</xmlelement> elements are used to specify the different video
formats that are
available.</p><codeblock>&lt;video>
  &lt;media-source value="video.mp4" type="video/mp4"/>
  &lt;media-source value="video.ogg" type="video/ogg"/>
  &lt;media-source value="video.webm" type="video/webm"/>
&lt;/video></codeblock></fig>
<fig id="fig_wsb_jpz_4hb"><title>Complex example of a video object, with multiple formats and
multi-lingual subtitles</title><p>The following code sample defines multiple presentational details for a video that is available
          in multiple formats. The video is referenced using key reference and a fallback image is
          provided for use when the video cannot be displayed.</p><codeblock>&lt;video width="400px" height="300px">
  &lt;desc>A video illustrating this procedure.&lt;/desc>
  &lt;fallback>
    &lt;image href="video-not-available.png">
      &lt;alt>This video cannot be displayed.&lt;/alt>
    &lt;/image>
  &lt;/fallback>
  
  &lt;!-- Reference the poster using a key -->
  &lt;video-poster keyref="video-poster"/>

  &lt;!--
    When the following elements are used, they have a default value of "true";
    setting value="true" and not specifying @value have the same effect.
    To turn any of these settings off, specify value="false".
  -->
  &lt;media-controls value="true"/>
  &lt;media-autoplay/>
  &lt;media-loop value="false"/>
  &lt;media-muted value="false"/>

  &lt;!-- Multiple formats, referenced via key. The key definition 
       specifies both the URI and the MIME type -->
  &lt;media-source keyref="video-mp4"/>
  &lt;media-source keyref="video-ogg"/>
  &lt;media-source keyref="video-webm"/>

  &lt;!-- Subtitle tracks in English, French and German.
       Each key definition provides a URI and specifies the type value "subtitles". -->
  &lt;media-track xml:lang="en" keyref="video-subtitles-en"/>
  &lt;media-track xml:lang="fr" keyref="video-subtitles-fr"/>
  &lt;media-track xml:lang="de" keyref="video-subtitles-de"/>
&lt;/video></codeblock></fig>
    </example>
  </refbody>
</reference>
